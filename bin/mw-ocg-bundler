#!/usr/bin/env node
"use strict";
require('core-js/shim'); // for Map, endsWith, etc.
var Promise = require('prfun');

var program = require('commander');
var bundler = require('../');
var fs = require('fs');
var util = require('util');

var P = require('../lib/p');

program
	.version(bundler.version)
	.usage('[options] <title> [title...]')
	.option('-m, --metabook <metabook.json>',
			'Use article list and structure from the specified json file')
	.option('-d, --directory <dirname>',
			'Don\'t zip up the output bundle; leave it in <dirname>')
	.option('-o, --output <filename>',
			'Save zip to the given <filename>', null)
	.option('-p, --prefix <prefix>',
			'Which wiki prefix to use to resolve the title (Parsoid v1 API) [enwiki]', null)
	.option('-h, --host <host>',
			'Wiki hostname to use to resolve the title (Parsoid v2 API, RESTbase API) [en.wikipedia.org]', null)
	.option('-a, --parsoid-api, --api <url>',
			'Parsoid API root', 'http://parsoid-lb.eqiad.wikimedia.org/')
	.option('--restbase-api <url>',
			'RESTbase API root [http://rest.wikimedia.org/<hostname>/v1/]')
	.option('--php-api <url>',
			'PHP API, required for non-standard prefix', null)
	.option('--api-version <auto,parsoid1,parsoid2,restbase1>',
			'Which API to use to fetch wikitext [auto]', 'auto')
	.option('-t, --toc <yes|no|auto>',
			'Force presence/absence of toc [auto]', 'auto')
	.option('-L, --lang <2-char lang code>',
			'Force collection to use the given default language', null)
	.option('-s, --size <max image size>',
			'Force the given maximum image dimension (in pixels)', null)
	.option('--papersize <letter|a4|auto>',
			'Set paper size', 'auto')
	.option('-c, --collection <collection>',
			'Specify a collection to bundle', null)
	.option('--title <title>',
			'Set the title of the generated collection', null)
	// set this to true to emit deprecated file formats for better pediapress
	// compatibility
	.option('--no-compat',
			'Omit redundant data used for backward-compatibility')
	// follow redirects? disable if front-end is known to give good titles.
	.option('--no-follow',
			'Don\'t follow article title redirects')
	// use for ZIM backend to ensure local links work.
	.option('--save-redirects',
			'Save information about article title redirects')
	// Prevent DoS:
	// If we exceed the bundle size limit, we halt immediately and exit
	// with an error code.
	.option('--bundle-size-limit <bytes>',
			'Total bundle size limit (default 0, no limit)', 0)
	// If we exceed the image size limit, we stop downloading images, skipping
	// all remaining images, and emit warnings, but do not halt and may
	// eventually exit with a success code.  If you want image size violations
	// to be fatal, use the bundle size limit.  Otherwise, typically set the
	// image size limit to be comfortably under the bundle size limit, to
	// ensure that the other bundle contents (HTML, attributions, etc) do
	// not push the bundle over the bundle size limit after image size limit
	// has been reached.
	.option('--image-size-limit <bytes>',
			'Total image size limit (default 0, no limit)', 0)
	// robustness
	.option('--retries <max retries>',
			'Retry failing HTTP requests (default 3)')
	.option('--timeout <milliseconds>',
			'Timeout for all HTTP requests (default 60 seconds)')
	// be kind to small wikis
	.option('--parallel-request-limit <n>',
			'Limit the number of simultaneous API requests', 0)
	.option('-v, --verbose',
			'Print verbose progress information')
	.option('-D, --debug',
			'Turn on debugging features (eg, full stack traces on exceptions)');
program.on('--help', function() {
	console.log('  If -o is omitted, creates bundle.zip');
	console.log('  The -m option can be used instead of specifying titles');
});

program.parse(process.argv);

if (program.args.length === 0 && !program.collection && !program.metabook) {
	console.error('Either the -m option, the -c option, or a page title is required.');
	return 1;
}
if ((program.metabook || program.collection) && program.args.length > 0) {
	console.error('Too many arguments.');
	return 1;
}
if (program.metabook && program.collection) {
	console.warn('Collection is ignored when a metabook is supplied.');
}

if (program.retries !== undefined) {
   require('../lib/retry-request').DEFAULT_RETRIES = program.retries;
}
if (program.timeout !== undefined) {
   require('../lib/retry-request').DEFAULT_TIMEOUT = program.timeout;
}
if (program.parallelRequestLimit !== undefined) {
   require('../lib/retry-request').REQUEST_LIMIT = +program.parallelRequestLimit;
}


var log = function() {
	try {
		var message = util.format.apply(null, arguments);
		var level = /^ERROR:/.test(message) ? 'error' :
			/^WARN:/.test(message) ? 'warn' :
			'info';
		// en/disable log messages here
		if (program.verbose || program.debug || level === 'error') {
			console.error.apply(console, arguments);
		}
		if (process.send) {
			process.send({
				type: 'log',
				level: level,
				message: message
			});
		}
	} catch (err) {
		// This should never happen!  But don't try to convert arguments
		// toString() if it does, since that might fail too.
		console.error("Could not format message!", err);
		if (process.send) {
			process.send({
				type: 'log',
				level: 'error',
				message: 'Could not format message! ' + err,
				stack: err.stack
			});
		}
	}
};

if (program.debug) {
	// easier-to-read filenames, for debugging
	require('../lib/image').COMPAT_FILENAMES = true;
}

var p = Promise.resolve();

// Load metabook.json
if (program.metabook) {
	// Load from file and parse JSON
	p = p.then(function() {
		return P.call(fs.readFile, fs, program.metabook, 'utf8');
	}).then(function(data) {
		return JSON.parse(data);
	});
} else if (program.collection) {
	if (!(program.prefix || program.host)) {
		program.host = 'en.wikipedia.org';
	}
	p = p.then(function() {
		return bundler.metabook.fromCollection(
			program.collection,
			program,
			log
		);
	});
} else {
	// Create a metabook.json from the given prefix and page titles
	if (!(program.prefix || program.host)) {
		program.host = 'en.wikipedia.org';
	}
	p = p.then(function() {
		return bundler.metabook.fromArticles(program.args.map(function(t) {
			return { prefix: program.prefix, host: program.host, title: t };
		}), program);
	});
}

// set default output filename
if ((!program.directory) && (!program.output)) {
	program.output = "bundle.zip";
}

// okay, do it!
p = p.then(function(metabook) {
	if (program.title) {
		metabook.title = program.title;
	}
	if (!metabook.papersize) {
		if (program.papersize === 'auto') {
			// use user's default papersize, as spec'ed by libpaper.
			// this may be a linuxism, but it's harmless if not present.
			if (process.env.PAPERSIZE) {
				metabook.papersize = process.env.PAPERSIZE;
				return metabook;
			}
			return P.call(fs.readFile, fs,
						  process.env.PAPERCONF || '/etc/papersize', 'utf8').
				then(function(paperconf) {
					// remove anything starting with # (comments)
					// ignore whitespace, take the "first string"
					// case-insensitive
					paperconf = paperconf.replace(/#[^\r\n]*/g, '').trim().
						replace(/\s[\s\S]*/, '').toLowerCase();
					metabook.papersize = paperconf;
					return metabook;
				}, function() {
					// no such file; leave papersize unspecified.
					return metabook;
				});
		}
		metabook.papersize = program.papersize;
	}
	return metabook;
}).then(function(metabook) {
	if (metabook.papersize !== undefined &&
		!/^(letter|a4)$/.test(metabook.papersize)) {
		log("WARN: unknown papersize:", metabook.papersize);
		delete metabook.papersize;
	}
	return bundler.bundle(metabook, {
		nozip: !!program.directory,
		output: program.directory || program.output,
		debug: !!program.debug,
		compat: !!program.compat, // pediapress compatibility
		follow: !!program.follow, // follow redirects
		saveRedirects: !!program.saveRedirects, // save redirect info
		restbaseApi: program.restbaseApi ?
			// Be user-friendly: strip trailing /page/html/ if present.
			program.restbaseApi.replace(/\/page\/html\/?$/, '/') :
			undefined,
		parsoidApi: program.parsoidApi,
		apiVersion: program.apiVersion,
		toc: program.toc,
		size: program.size,
		// DoS prevention
		bundleSizeLimit: +program.bundleSizeLimit,
		imageSizeLimit: +program.imageSizeLimit,
		// logging
		log: log
	});
}).catch(function(err) {
	var msg = {
		type: 'log',
		level: 'error'
	};
	if ( err instanceof Error ) {
		msg.message = err.message;
		msg.stack = err.stack;
	} else {
		msg.message = '' + err;
	}
	console.error( (program.debug && msg.stack) || msg.message );
	// process.send is sync, so we won't exit before this is sent (yay)
	if (process.send) {
		process.send(msg);
	}
	process.exit(err.exitCode || 1);
}).done();
